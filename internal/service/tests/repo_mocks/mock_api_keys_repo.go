// Code generated by MockGen. DO NOT EDIT.
// Source: userApiKeys.go

// Package repo_mocks is a generated GoMock package.
package repo_mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/linnoxlewis/trade-bot/internal/domain"
)

// MockApiKeyRepo is a mock of ApiKeyRepo interface.
type MockApiKeyRepo struct {
	ctrl     *gomock.Controller
	recorder *MockApiKeyRepoMockRecorder
}

// MockApiKeyRepoMockRecorder is the mock recorder for MockApiKeyRepo.
type MockApiKeyRepoMockRecorder struct {
	mock *MockApiKeyRepo
}

// NewMockApiKeyRepo creates a new mock instance.
func NewMockApiKeyRepo(ctrl *gomock.Controller) *MockApiKeyRepo {
	mock := &MockApiKeyRepo{ctrl: ctrl}
	mock.recorder = &MockApiKeyRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiKeyRepo) EXPECT() *MockApiKeyRepoMockRecorder {
	return m.recorder
}

// AddApiKeys mocks base method.
func (m *MockApiKeyRepo) AddApiKeys(ctx context.Context, keys *domain.ApiKeys) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddApiKeys", ctx, keys)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddApiKeys indicates an expected call of AddApiKeys.
func (mr *MockApiKeyRepoMockRecorder) AddApiKeys(ctx, keys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApiKeys", reflect.TypeOf((*MockApiKeyRepo)(nil).AddApiKeys), ctx, keys)
}

// ClearApiKey mocks base method.
func (m *MockApiKeyRepo) ClearApiKey(ctx context.Context, userId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearApiKey", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearApiKey indicates an expected call of ClearApiKey.
func (mr *MockApiKeyRepoMockRecorder) ClearApiKey(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearApiKey", reflect.TypeOf((*MockApiKeyRepo)(nil).ClearApiKey), ctx, userId)
}

// DeleteApiKey mocks base method.
func (m *MockApiKeyRepo) DeleteApiKey(ctx context.Context, userId int64, exchange string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApiKey", ctx, userId, exchange)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApiKey indicates an expected call of DeleteApiKey.
func (mr *MockApiKeyRepoMockRecorder) DeleteApiKey(ctx, userId, exchange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApiKey", reflect.TypeOf((*MockApiKeyRepo)(nil).DeleteApiKey), ctx, userId, exchange)
}

// GetApiKeysByUserId mocks base method.
func (m *MockApiKeyRepo) GetApiKeysByUserId(ctx context.Context, userId int64) ([]*domain.ApiKeys, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiKeysByUserId", ctx, userId)
	ret0, _ := ret[0].([]*domain.ApiKeys)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiKeysByUserId indicates an expected call of GetApiKeysByUserId.
func (mr *MockApiKeyRepoMockRecorder) GetApiKeysByUserId(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiKeysByUserId", reflect.TypeOf((*MockApiKeyRepo)(nil).GetApiKeysByUserId), ctx, userId)
}

// GetApiKeysByUserIdAndExchange mocks base method.
func (m *MockApiKeyRepo) GetApiKeysByUserIdAndExchange(ctx context.Context, userId int64, exchange string) (*domain.ApiKeys, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiKeysByUserIdAndExchange", ctx, userId, exchange)
	ret0, _ := ret[0].(*domain.ApiKeys)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiKeysByUserIdAndExchange indicates an expected call of GetApiKeysByUserIdAndExchange.
func (mr *MockApiKeyRepoMockRecorder) GetApiKeysByUserIdAndExchange(ctx, userId, exchange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiKeysByUserIdAndExchange", reflect.TypeOf((*MockApiKeyRepo)(nil).GetApiKeysByUserIdAndExchange), ctx, userId, exchange)
}
