// Code generated by MockGen. DO NOT EDIT.
// Source: exchanger/exchanger.go

// Package mock_exchanger is a generated GoMock package.
package mocks

import (
	"github.com/golang/mock/gomock"
	"github.com/linnoxlewis/trade-bot/internal/domain"
	"github.com/linnoxlewis/trade-bot/internal/domain/dto"
	"reflect"
)

// MockExchanger is a mock of Exchanger interface.
type MockExchanger struct {
	ctrl     *gomock.Controller
	recorder *MockExchangerMockRecorder
}

// MockExchangerMockRecorder is the mock recorder for MockExchanger.
type MockExchangerMockRecorder struct {
	mock *MockExchanger
}

// NewMockExchanger creates a new mock instance.
func NewMockExchanger(ctrl *gomock.Controller) *MockExchanger {
	mock := &MockExchanger{ctrl: ctrl}
	mock.recorder = &MockExchangerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchanger) EXPECT() *MockExchangerMockRecorder {
	return m.recorder
}

// Balance mocks base method.
func (m *MockExchanger) Balance(keys *domain.ApiKeys, exchange string) (domain.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Balance", keys, exchange)
	ret0, _ := ret[0].(domain.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Balance indicates an expected call of Balance.
func (mr *MockExchangerMockRecorder) Balance(keys, exchange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Balance", reflect.TypeOf((*MockExchanger)(nil).Balance), keys, exchange)
}

// CancelOrder mocks base method.
func (m *MockExchanger) CancelOrder(keys *domain.ApiKeys, order *dto.CancelOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", keys, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockExchangerMockRecorder) CancelOrder(keys, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockExchanger)(nil).CancelOrder), keys, order)
}

// CreateOrder mocks base method.
func (m *MockExchanger) CreateOrder(keys *domain.ApiKeys, order *dto.Order) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", keys, order)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockExchangerMockRecorder) CreateOrder(keys, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockExchanger)(nil).CreateOrder), keys, order)
}

// GetOpenOrders mocks base method.
func (m *MockExchanger) GetOpenOrders(keys *domain.ApiKeys, exchange, symbol string) ([]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenOrders", keys, exchange, symbol)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenOrders indicates an expected call of GetOpenOrders.
func (mr *MockExchangerMockRecorder) GetOpenOrders(keys, exchange, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenOrders", reflect.TypeOf((*MockExchanger)(nil).GetOpenOrders), keys, exchange, symbol)
}

// GetOrder mocks base method.
func (m *MockExchanger) GetOrder(keys *domain.ApiKeys, exchange, symbol string, orderId int64) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", keys, exchange, symbol, orderId)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockExchangerMockRecorder) GetOrder(keys, exchange, symbol, orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockExchanger)(nil).GetOrder), keys, exchange, symbol, orderId)
}

// GetSymbols mocks base method.
func (m *MockExchanger) GetSymbols(keys *domain.ApiKeys, exchange string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSymbols", keys, exchange)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSymbols indicates an expected call of GetSymbols.
func (mr *MockExchangerMockRecorder) GetSymbols(keys, exchange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSymbols", reflect.TypeOf((*MockExchanger)(nil).GetSymbols), keys, exchange)
}

// UpdateOrder mocks base method.
func (m *MockExchanger) UpdateOrder(keys *domain.ApiKeys, order *dto.UpdateOrder) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", keys, order)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockExchangerMockRecorder) UpdateOrder(keys, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockExchanger)(nil).UpdateOrder), keys, order)
}

// MockExchangerCli is a mock of ExchangerCli interface.
type MockExchangerCli struct {
	ctrl     *gomock.Controller
	recorder *MockExchangerCliMockRecorder
}

// MockExchangerCliMockRecorder is the mock recorder for MockExchangerCli.
type MockExchangerCliMockRecorder struct {
	mock *MockExchangerCli
}

// NewMockExchangerCli creates a new mock instance.
func NewMockExchangerCli(ctrl *gomock.Controller) *MockExchangerCli {
	mock := &MockExchangerCli{ctrl: ctrl}
	mock.recorder = &MockExchangerCliMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangerCli) EXPECT() *MockExchangerCliMockRecorder {
	return m.recorder
}

// CancelOrder mocks base method.
func (m *MockExchangerCli) CancelOrder(pubKey, secKey, passPhrase string, order *dto.CancelOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", pubKey, secKey, passPhrase, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockExchangerCliMockRecorder) CancelOrder(pubKey, secKey, passPhrase, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockExchangerCli)(nil).CancelOrder), pubKey, secKey, passPhrase, order)
}

// CreateOrder mocks base method.
func (m *MockExchangerCli) CreateOrder(pubKey, secKey, passPhrase string, order *dto.Order) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", pubKey, secKey, passPhrase, order)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockExchangerCliMockRecorder) CreateOrder(pubKey, secKey, passPhrase, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockExchangerCli)(nil).CreateOrder), pubKey, secKey, passPhrase, order)
}

// GetBalance mocks base method.
func (m *MockExchangerCli) GetBalance(pubKey, secKey, passPhrase string) (domain.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", pubKey, secKey, passPhrase)
	ret0, _ := ret[0].(domain.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockExchangerCliMockRecorder) GetBalance(pubKey, secKey, passPhrase interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockExchangerCli)(nil).GetBalance), pubKey, secKey, passPhrase)
}

// GetOpenOrders mocks base method.
func (m *MockExchangerCli) GetOpenOrders(pubKey, secKey, passPhrase, symbol string) ([]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenOrders", pubKey, secKey, passPhrase, symbol)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenOrders indicates an expected call of GetOpenOrders.
func (mr *MockExchangerCliMockRecorder) GetOpenOrders(pubKey, secKey, passPhrase, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenOrders", reflect.TypeOf((*MockExchangerCli)(nil).GetOpenOrders), pubKey, secKey, passPhrase, symbol)
}

// GetOrder mocks base method.
func (m *MockExchangerCli) GetOrder(pubKey, secKey, passPhrase, symbol string, orderId int64) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", pubKey, secKey, passPhrase, symbol, orderId)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockExchangerCliMockRecorder) GetOrder(pubKey, secKey, passPhrase, symbol, orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockExchangerCli)(nil).GetOrder), pubKey, secKey, passPhrase, symbol, orderId)
}

// GetSymbols mocks base method.
func (m *MockExchangerCli) GetSymbols(pubKey, secKey, passPhrase string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSymbols", pubKey, secKey, passPhrase)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSymbols indicates an expected call of GetSymbols.
func (mr *MockExchangerCliMockRecorder) GetSymbols(pubKey, secKey, passPhrase interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSymbols", reflect.TypeOf((*MockExchangerCli)(nil).GetSymbols), pubKey, secKey, passPhrase)
}

// UpdateOrder mocks base method.
func (m *MockExchangerCli) UpdateOrder(pubKey, secKey, passPhrase string, order *dto.UpdateOrder) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", pubKey, secKey, passPhrase, order)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockExchangerCliMockRecorder) UpdateOrder(pubKey, secKey, passPhrase, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockExchangerCli)(nil).UpdateOrder), pubKey, secKey, passPhrase, order)
}
