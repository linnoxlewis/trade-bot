// Code generated by MockGen. DO NOT EDIT.
// Source: users.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/linnoxlewis/trade-bot/internal/domain"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepo) CreateUser(ctx context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepoMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepo)(nil).CreateUser), ctx, user)
}

// ExistUser mocks base method.
func (m *MockUserRepo) ExistUser(ctx context.Context, id int64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistUser", ctx, id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ExistUser indicates an expected call of ExistUser.
func (mr *MockUserRepoMockRecorder) ExistUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistUser", reflect.TypeOf((*MockUserRepo)(nil).ExistUser), ctx, id)
}

// GetAdminIds mocks base method.
func (m *MockUserRepo) GetAdminIds(ctx context.Context) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminIds", ctx)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminIds indicates an expected call of GetAdminIds.
func (mr *MockUserRepoMockRecorder) GetAdminIds(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminIds", reflect.TypeOf((*MockUserRepo)(nil).GetAdminIds), ctx)
}

// IsAdmin mocks base method.
func (m *MockUserRepo) IsAdmin(ctx context.Context, id int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAdmin", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAdmin indicates an expected call of IsAdmin.
func (mr *MockUserRepoMockRecorder) IsAdmin(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdmin", reflect.TypeOf((*MockUserRepo)(nil).IsAdmin), ctx, id)
}
